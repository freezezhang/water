#include "object_pool.h"
#include <stdio.h>
#include <iostream>
#include <vector>
using namespace std;

class T {
	public:
		T() { ++s; x = s + 1.0f; y = s + 2.0f; z = s + 3.0f; cout << "T(" << s << ") : " 
		<< x << " " << y << " " << z << endl;};
		~T() { x = 0.0f; y = 0.0f; z = 0.0f; cout << "~T()" << endl;}
	float x;
	float y;
	float z;
	static int s;
};
int T::s = 0;

class T1 {
	public:
	T1() { c = x++; cout << "c = " << (int)c << endl;}
	char c;
	static char x;
};

char T1::x = 0;

int main(void) {
	/*
	ObjectPool<T, 1024> objects;
	if (objects.Init() != 0) {
		printf("init != 0\n");
		return -1;
	}
	for (int i = 0; i < 1026; ++i) {
		T* t = objects.Get();
		if (t == nullptr) { cout << "objects full" << endl; return 0;}
	//	objects.Put(t);
//		cout << "(" << i << ")" << ": " <<  t->x << " " << t->y << " " << t->z << endl;
	}
	*/

	ObjectPool<T1, 1000> objects;
	objects.Init();
	for (int i = 0; i < 1027; ++i) {
		T1* t = objects.Allocate();
		if (t == nullptr) { cout << "objects full" << endl;}
	//	objects.Deallocate(t);
//		cout << "(" << i << ")" << ": " <<  t->x << " " << t->y << " " << t->z << endl;
	}
	
}
